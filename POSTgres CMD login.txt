For each server on pgAdmin, there's an expandable Databases, Login/Group Roles, and Tablespaces

Under Login/Group, create another role if there is only the default. [There's a password assigned here? Missing a step somewhere] Assign it appropriate privileges.

Worked at home: 
psql -U [username] -d [database]

Use that to login, asks for pw. Then db prompt (ends in #). use -c type command in here; to make queries. (semicolon very important)


If you get an error like 'permissions denied SQL state: #######': https://stackoverflow.com/questions/14083311/permission-denied-when-trying-to-import-a-csv-file-from-pgadmin

Run from file? \i your_file_name_here (in cwd or with path?)

##########
Commands:
##########

\d [tablename] - returns column names, data types, and 'modfiers' (e.g. NOT NULL) for table
\dt - returns list of relations in db; schema | name | type (e.g. table) | owner
\l - returns list of all dbs on the 'server'

Listing 				Command 	Argument
Table, index, 
-view, or sequence 		\d 			name
Tables 					\dt 		name
Indexes 				\di 		name
Sequences 				\ds 		name
Views 					\dv 		name
Permissions 			\dp or \z 	name
System tables 			\dS 		name
Large objects 			\dl 		name
Types 					\dT 		name
Functions 				\df 		name
Operators 				\do 		name
Aggregates 				\da 		name
Comments 				\dd 		name
Databases 				\l 			name


Comparison 								Operator
regular expression 						~
regular expression, case insensitive 	~*
not equal to regular expression 		!~
not equal to regular expression, 
	-case insensitive 					!~*

	Usage: SELECT subject FROM topics WHERE subject ~* 'eclipse';


Making a backup:
pg_dump -h db_server -U db_user -W db_name > db.20070725.dump
Password:__?

    Connecting to a Postgres server named "db_server".
    Connecting as the Postgres user "db_user".
    Forcing a password prompt with "-W".
    Dumping the Postgres database (a "Postgres dump" of the database) named "db_name".
    Sending the Postgres output to a file named "db.20070725.dump".


##Possible 'drop all tables like wildcard' function

CREATE OR REPLACE FUNCTION footgun(IN _schema TEXT, IN _parttionbase TEXT) 
RETURNS void 
LANGUAGE plpgsql
AS
$$
DECLARE
    row     record;
BEGIN
    FOR row IN 
        SELECT
            table_schema,
            table_name
        FROM
            information_schema.tables
        WHERE
            table_type = 'BASE TABLE'
        AND
            table_schema = _schema
        AND
            table_name ILIKE (_parttionbase || '%')
    LOOP
        EXECUTE 'DROP TABLE ' || quote_ident(row.table_schema) || '.' || quote_ident(row.table_name);
        RAISE INFO 'Dropped table: %', quote_ident(row.table_schema) || '.' || quote_ident(row.table_name);
    END LOOP;
END;
$$;

SELECT footgun('public', 'tablename');